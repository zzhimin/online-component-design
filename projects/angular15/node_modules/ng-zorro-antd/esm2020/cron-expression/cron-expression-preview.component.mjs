import { __decorate } from "tslib";
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';
import { InputBoolean } from 'ng-zorro-antd/core/util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "ng-zorro-antd/icon";
export class NzCronExpressionPreviewComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.TimeList = [];
        this.visible = true;
        this.nzSemantic = null;
        this.loadMorePreview = new EventEmitter();
        this.isExpand = true;
    }
    setExpand() {
        this.isExpand = !this.isExpand;
        this.cdr.markForCheck();
    }
}
NzCronExpressionPreviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.5", ngImport: i0, type: NzCronExpressionPreviewComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NzCronExpressionPreviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.5", type: NzCronExpressionPreviewComponent, selector: "nz-cron-expression-preview", inputs: { TimeList: "TimeList", visible: "visible", locale: "locale", nzSemantic: "nzSemantic" }, outputs: { loadMorePreview: "loadMorePreview" }, exportAs: ["nzCronExpressionPreview"], ngImport: i0, template: `<div class="ant-collapse ant-collapse-borderless ant-cron-expression-preview">
    <div class="ant-cron-expression-preview-dateTime" [class.ant-cron-expression-preview-dateTime-center]="!isExpand">
      <ng-container *ngIf="visible; else cronError">
        <ng-container *ngIf="!nzSemantic; else semanticTemplate">
          {{ TimeList[0] | date: 'YYYY-MM-dd HH:mm:ss' }}
        </ng-container>
        <ng-template #semanticTemplate [ngTemplateOutlet]="nzSemantic"></ng-template>
      </ng-container>
      <ng-template #cronError>{{ locale.cronError }}</ng-template>
    </div>
    <div *ngIf="visible" class="ant-cron-expression-preview-content">
      <div class="ant-cron-expression-preview-content-date">
        <ng-container *ngIf="!isExpand">
          <ul class="ant-cron-expression-preview-list">
            <li *ngFor="let item of TimeList">
              {{ item | date: 'YYYY-MM-dd HH:mm:ss' }}
            </li>
            <li><a (click)="loadMorePreview.emit()">···</a></li>
          </ul>
        </ng-container>
      </div>
      <ul class="ant-cron-expression-preview-icon">
        <li *ngIf="isExpand"><span nz-icon nzType="down" nzTheme="outline" (click)="setExpand()"></span></li>
        <li *ngIf="!isExpand"><span nz-icon nzType="up" nzTheme="outline" (click)="setExpand()"></span></li>
      </ul>
    </div>
  </div>`, isInline: true, dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.NzIconDirective, selector: "[nz-icon]", inputs: ["nzSpin", "nzRotate", "nzType", "nzTheme", "nzTwotoneColor", "nzIconfont"], exportAs: ["nzIcon"] }, { kind: "pipe", type: i1.DatePipe, name: "date" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
__decorate([
    InputBoolean()
], NzCronExpressionPreviewComponent.prototype, "visible", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.5", ngImport: i0, type: NzCronExpressionPreviewComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    selector: 'nz-cron-expression-preview',
                    exportAs: 'nzCronExpressionPreview',
                    template: `<div class="ant-collapse ant-collapse-borderless ant-cron-expression-preview">
    <div class="ant-cron-expression-preview-dateTime" [class.ant-cron-expression-preview-dateTime-center]="!isExpand">
      <ng-container *ngIf="visible; else cronError">
        <ng-container *ngIf="!nzSemantic; else semanticTemplate">
          {{ TimeList[0] | date: 'YYYY-MM-dd HH:mm:ss' }}
        </ng-container>
        <ng-template #semanticTemplate [ngTemplateOutlet]="nzSemantic"></ng-template>
      </ng-container>
      <ng-template #cronError>{{ locale.cronError }}</ng-template>
    </div>
    <div *ngIf="visible" class="ant-cron-expression-preview-content">
      <div class="ant-cron-expression-preview-content-date">
        <ng-container *ngIf="!isExpand">
          <ul class="ant-cron-expression-preview-list">
            <li *ngFor="let item of TimeList">
              {{ item | date: 'YYYY-MM-dd HH:mm:ss' }}
            </li>
            <li><a (click)="loadMorePreview.emit()">···</a></li>
          </ul>
        </ng-container>
      </div>
      <ul class="ant-cron-expression-preview-icon">
        <li *ngIf="isExpand"><span nz-icon nzType="down" nzTheme="outline" (click)="setExpand()"></span></li>
        <li *ngIf="!isExpand"><span nz-icon nzType="up" nzTheme="outline" (click)="setExpand()"></span></li>
      </ul>
    </div>
  </div>`
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { TimeList: [{
                type: Input
            }], visible: [{
                type: Input
            }], locale: [{
                type: Input
            }], nzSemantic: [{
                type: Input
            }], loadMorePreview: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvbi1leHByZXNzaW9uLXByZXZpZXcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY29tcG9uZW50cy9jcm9uLWV4cHJlc3Npb24vY3Jvbi1leHByZXNzaW9uLXByZXZpZXcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7QUFFSCxPQUFPLEVBQ0wsU0FBUyxFQUNULGlCQUFpQixFQUNqQix1QkFBdUIsRUFDdkIsS0FBSyxFQUNMLE1BQU0sRUFDTixZQUFZLEVBR2IsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7O0FBb0N2RCxNQUFNLE9BQU8sZ0NBQWdDO0lBUzNDLFlBQW9CLEdBQXNCO1FBQXRCLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBUmpDLGFBQVEsR0FBVyxFQUFFLENBQUM7UUFDTixZQUFPLEdBQVksSUFBSSxDQUFDO1FBRXhDLGVBQVUsR0FBNkIsSUFBSSxDQUFDO1FBQ2xDLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUU5RCxhQUFRLEdBQVksSUFBSSxDQUFDO0lBRW9CLENBQUM7SUFFOUMsU0FBUztRQUNQLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQy9CLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7NkhBZFUsZ0NBQWdDO2lIQUFoQyxnQ0FBZ0MsNFBBNUJqQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7U0EwQkg7QUFJa0I7SUFBZixZQUFZLEVBQUU7aUVBQXlCOzJGQUZ0QyxnQ0FBZ0M7a0JBakM1QyxTQUFTO21CQUFDO29CQUNULGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtvQkFDckMsUUFBUSxFQUFFLDRCQUE0QjtvQkFDdEMsUUFBUSxFQUFFLHlCQUF5QjtvQkFDbkMsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQTBCSDtpQkFDUjt3R0FFVSxRQUFRO3NCQUFoQixLQUFLO2dCQUNtQixPQUFPO3NCQUEvQixLQUFLO2dCQUNHLE1BQU07c0JBQWQsS0FBSztnQkFDRyxVQUFVO3NCQUFsQixLQUFLO2dCQUNhLGVBQWU7c0JBQWpDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQge1xuICBDb21wb25lbnQsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgVGVtcGxhdGVSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IElucHV0Qm9vbGVhbiB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS91dGlsJztcbmltcG9ydCB7IE56Q3JvbkV4cHJlc3Npb25Dcm9uRXJyb3JJMThuIH0gZnJvbSAnbmctem9ycm8tYW50ZC9pMThuJztcblxuQENvbXBvbmVudCh7XG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBzZWxlY3RvcjogJ256LWNyb24tZXhwcmVzc2lvbi1wcmV2aWV3JyxcbiAgZXhwb3J0QXM6ICduekNyb25FeHByZXNzaW9uUHJldmlldycsXG4gIHRlbXBsYXRlOiBgPGRpdiBjbGFzcz1cImFudC1jb2xsYXBzZSBhbnQtY29sbGFwc2UtYm9yZGVybGVzcyBhbnQtY3Jvbi1leHByZXNzaW9uLXByZXZpZXdcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYW50LWNyb24tZXhwcmVzc2lvbi1wcmV2aWV3LWRhdGVUaW1lXCIgW2NsYXNzLmFudC1jcm9uLWV4cHJlc3Npb24tcHJldmlldy1kYXRlVGltZS1jZW50ZXJdPVwiIWlzRXhwYW5kXCI+XG4gICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwidmlzaWJsZTsgZWxzZSBjcm9uRXJyb3JcIj5cbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFuelNlbWFudGljOyBlbHNlIHNlbWFudGljVGVtcGxhdGVcIj5cbiAgICAgICAgICB7eyBUaW1lTGlzdFswXSB8IGRhdGU6ICdZWVlZLU1NLWRkIEhIOm1tOnNzJyB9fVxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgPG5nLXRlbXBsYXRlICNzZW1hbnRpY1RlbXBsYXRlIFtuZ1RlbXBsYXRlT3V0bGV0XT1cIm56U2VtYW50aWNcIj48L25nLXRlbXBsYXRlPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICA8bmctdGVtcGxhdGUgI2Nyb25FcnJvcj57eyBsb2NhbGUuY3JvbkVycm9yIH19PC9uZy10ZW1wbGF0ZT5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2ICpuZ0lmPVwidmlzaWJsZVwiIGNsYXNzPVwiYW50LWNyb24tZXhwcmVzc2lvbi1wcmV2aWV3LWNvbnRlbnRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJhbnQtY3Jvbi1leHByZXNzaW9uLXByZXZpZXctY29udGVudC1kYXRlXCI+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhaXNFeHBhbmRcIj5cbiAgICAgICAgICA8dWwgY2xhc3M9XCJhbnQtY3Jvbi1leHByZXNzaW9uLXByZXZpZXctbGlzdFwiPlxuICAgICAgICAgICAgPGxpICpuZ0Zvcj1cImxldCBpdGVtIG9mIFRpbWVMaXN0XCI+XG4gICAgICAgICAgICAgIHt7IGl0ZW0gfCBkYXRlOiAnWVlZWS1NTS1kZCBISDptbTpzcycgfX1cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8bGk+PGEgKGNsaWNrKT1cImxvYWRNb3JlUHJldmlldy5lbWl0KClcIj7Ct8K3wrc8L2E+PC9saT5cbiAgICAgICAgICA8L3VsPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvZGl2PlxuICAgICAgPHVsIGNsYXNzPVwiYW50LWNyb24tZXhwcmVzc2lvbi1wcmV2aWV3LWljb25cIj5cbiAgICAgICAgPGxpICpuZ0lmPVwiaXNFeHBhbmRcIj48c3BhbiBuei1pY29uIG56VHlwZT1cImRvd25cIiBuelRoZW1lPVwib3V0bGluZVwiIChjbGljayk9XCJzZXRFeHBhbmQoKVwiPjwvc3Bhbj48L2xpPlxuICAgICAgICA8bGkgKm5nSWY9XCIhaXNFeHBhbmRcIj48c3BhbiBuei1pY29uIG56VHlwZT1cInVwXCIgbnpUaGVtZT1cIm91dGxpbmVcIiAoY2xpY2spPVwic2V0RXhwYW5kKClcIj48L3NwYW4+PC9saT5cbiAgICAgIDwvdWw+XG4gICAgPC9kaXY+XG4gIDwvZGl2PmBcbn0pXG5leHBvcnQgY2xhc3MgTnpDcm9uRXhwcmVzc2lvblByZXZpZXdDb21wb25lbnQge1xuICBASW5wdXQoKSBUaW1lTGlzdDogRGF0ZVtdID0gW107XG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSB2aXNpYmxlOiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgbG9jYWxlITogTnpDcm9uRXhwcmVzc2lvbkNyb25FcnJvckkxOG47XG4gIEBJbnB1dCgpIG56U2VtYW50aWM6IFRlbXBsYXRlUmVmPHZvaWQ+IHwgbnVsbCA9IG51bGw7XG4gIEBPdXRwdXQoKSByZWFkb25seSBsb2FkTW9yZVByZXZpZXcgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgaXNFeHBhbmQ6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICBzZXRFeHBhbmQoKTogdm9pZCB7XG4gICAgdGhpcy5pc0V4cGFuZCA9ICF0aGlzLmlzRXhwYW5kO1xuICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICB9XG59XG4iXX0=