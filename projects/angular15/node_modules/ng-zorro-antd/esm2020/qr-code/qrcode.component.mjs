/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { isPlatformBrowser } from '@angular/common';
import { ChangeDetectionStrategy, Component, Input, ViewChild, Output, EventEmitter, Inject, PLATFORM_ID } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { drawCanvas, plotQRCodeData } from './qrcode';
import * as i0 from "@angular/core";
import * as i1 from "ng-zorro-antd/i18n";
import * as i2 from "ng-zorro-antd/spin";
import * as i3 from "@angular/common";
import * as i4 from "ng-zorro-antd/button";
import * as i5 from "ng-zorro-antd/core/transition-patch";
import * as i6 from "ng-zorro-antd/icon";
export class NzQRCodeComponent {
    constructor(i18n, cdr, platformId) {
        this.i18n = i18n;
        this.cdr = cdr;
        this.platformId = platformId;
        this.nzValue = '';
        this.nzColor = '#000000';
        this.nzSize = 160;
        this.nzIcon = '';
        this.nzIconSize = 40;
        this.nzBordered = true;
        this.nzStatus = 'active';
        this.nzLevel = 'M';
        this.nzRefresh = new EventEmitter();
        // https://github.com/angular/universal-starter/issues/538#issuecomment-365518693
        // canvas is not supported by the SSR DOM
        this.isBrowser = true;
        this.destroy$ = new Subject();
        this.isBrowser = isPlatformBrowser(this.platformId);
        this.cdr.markForCheck();
    }
    ngOnInit() {
        this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.locale = this.i18n.getLocaleData('QRCode');
            this.cdr.markForCheck();
        });
    }
    ngOnChanges(changes) {
        const { nzValue, nzIcon, nzLevel, nzSize, nzIconSize, nzColor } = changes;
        if ((nzValue || nzIcon || nzLevel || nzSize || nzIconSize || nzColor) && this.canvas) {
            this.drawCanvasQRCode();
        }
    }
    ngAfterViewInit() {
        this.drawCanvasQRCode();
    }
    reloadQRCode() {
        this.drawCanvasQRCode();
        this.nzRefresh.emit('refresh');
    }
    drawCanvasQRCode() {
        if (this.canvas) {
            drawCanvas(this.canvas.nativeElement, plotQRCodeData(this.nzValue, this.nzLevel), this.nzSize, 10, this.nzColor, this.nzIconSize, this.nzIcon);
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
NzQRCodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.5", ngImport: i0, type: NzQRCodeComponent, deps: [{ token: i1.NzI18nService }, { token: i0.ChangeDetectorRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
NzQRCodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.5", type: NzQRCodeComponent, selector: "nz-qrcode", inputs: { nzValue: "nzValue", nzColor: "nzColor", nzSize: "nzSize", nzIcon: "nzIcon", nzIconSize: "nzIconSize", nzBordered: "nzBordered", nzStatus: "nzStatus", nzLevel: "nzLevel" }, outputs: { nzRefresh: "nzRefresh" }, host: { properties: { "class.ant-qrcode-border": "nzBordered" }, classAttribute: "ant-qrcode" }, viewQueries: [{ propertyName: "canvas", first: true, predicate: ["canvas"], descendants: true }], exportAs: ["nzQRCode"], usesOnChanges: true, ngImport: i0, template: `
    <div class="ant-qrcode-mask" *ngIf="nzStatus !== 'active'">
      <nz-spin *ngIf="nzStatus === 'loading'"></nz-spin>
      <div *ngIf="nzStatus === 'expired'">
        <p class="ant-qrcode-expired">{{ locale.expired }}</p>
        <button nz-button nzType="link" (click)="reloadQRCode()">
          <span nz-icon nzType="reload" nzTheme="outline"></span>
          <span>{{ locale.refresh }}</span>
        </button>
      </div>
    </div>
    <ng-container *ngIf="isBrowser">
      <canvas #canvas></canvas>
    </ng-container>
  `, isInline: true, dependencies: [{ kind: "component", type: i2.NzSpinComponent, selector: "nz-spin", inputs: ["nzIndicator", "nzSize", "nzTip", "nzDelay", "nzSimple", "nzSpinning"], exportAs: ["nzSpin"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.NzButtonComponent, selector: "button[nz-button], a[nz-button]", inputs: ["nzBlock", "nzGhost", "nzSearch", "nzLoading", "nzDanger", "disabled", "tabIndex", "nzType", "nzShape", "nzSize"], exportAs: ["nzButton"] }, { kind: "directive", type: i5.ɵNzTransitionPatchDirective, selector: "[nz-button], nz-button-group, [nz-icon], [nz-menu-item], [nz-submenu], nz-select-top-control, nz-select-placeholder, nz-input-group", inputs: ["hidden"] }, { kind: "directive", type: i6.NzIconDirective, selector: "[nz-icon]", inputs: ["nzSpin", "nzRotate", "nzType", "nzTheme", "nzTwotoneColor", "nzIconfont"], exportAs: ["nzIcon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.5", ngImport: i0, type: NzQRCodeComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'nz-qrcode',
                    exportAs: 'nzQRCode',
                    template: `
    <div class="ant-qrcode-mask" *ngIf="nzStatus !== 'active'">
      <nz-spin *ngIf="nzStatus === 'loading'"></nz-spin>
      <div *ngIf="nzStatus === 'expired'">
        <p class="ant-qrcode-expired">{{ locale.expired }}</p>
        <button nz-button nzType="link" (click)="reloadQRCode()">
          <span nz-icon nzType="reload" nzTheme="outline"></span>
          <span>{{ locale.refresh }}</span>
        </button>
      </div>
    </div>
    <ng-container *ngIf="isBrowser">
      <canvas #canvas></canvas>
    </ng-container>
  `,
                    host: {
                        class: 'ant-qrcode',
                        '[class.ant-qrcode-border]': `nzBordered`
                    }
                }]
        }], ctorParameters: function () { return [{ type: i1.NzI18nService }, { type: i0.ChangeDetectorRef }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { canvas: [{
                type: ViewChild,
                args: ['canvas', { static: false }]
            }], nzValue: [{
                type: Input
            }], nzColor: [{
                type: Input
            }], nzSize: [{
                type: Input
            }], nzIcon: [{
                type: Input
            }], nzIconSize: [{
                type: Input
            }], nzBordered: [{
                type: Input
            }], nzStatus: [{
                type: Input
            }], nzLevel: [{
                type: Input
            }], nzRefresh: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXJjb2RlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NvbXBvbmVudHMvcXItY29kZS9xcmNvZGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUVILE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8sRUFFTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUVULEtBQUssRUFFTCxTQUFTLEVBRVQsTUFBTSxFQUNOLFlBQVksRUFJWixNQUFNLEVBQ04sV0FBVyxFQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSTNDLE9BQU8sRUFBRSxVQUFVLEVBQW1CLGNBQWMsRUFBRSxNQUFNLFVBQVUsQ0FBQzs7Ozs7Ozs7QUEwQnZFLE1BQU0sT0FBTyxpQkFBaUI7SUFtQjVCLFlBQ1UsSUFBbUIsRUFDbkIsR0FBc0IsRUFDRCxVQUFrQjtRQUZ2QyxTQUFJLEdBQUosSUFBSSxDQUFlO1FBQ25CLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBQ0QsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQXBCeEMsWUFBTyxHQUFXLEVBQUUsQ0FBQztRQUNyQixZQUFPLEdBQVcsU0FBUyxDQUFDO1FBQzVCLFdBQU0sR0FBVyxHQUFHLENBQUM7UUFDckIsV0FBTSxHQUFXLEVBQUUsQ0FBQztRQUNwQixlQUFVLEdBQVcsRUFBRSxDQUFDO1FBQ3hCLGVBQVUsR0FBWSxJQUFJLENBQUM7UUFDM0IsYUFBUSxHQUFxQyxRQUFRLENBQUM7UUFDdEQsWUFBTyxHQUFpQyxHQUFHLENBQUM7UUFFbEMsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFHMUQsaUZBQWlGO1FBQ2pGLHlDQUF5QztRQUN6QyxjQUFTLEdBQUcsSUFBSSxDQUFDO1FB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c291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIFZpZXdDaGlsZCxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIE9uSW5pdCxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIE9uRGVzdHJveSxcbiAgSW5qZWN0LFxuICBQTEFURk9STV9JRFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgTnpRUkNvZGVJMThuSW50ZXJmYWNlLCBOekkxOG5TZXJ2aWNlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9pMThuJztcblxuaW1wb3J0IHsgZHJhd0NhbnZhcywgRVJST1JfTEVWRUxfTUFQLCBwbG90UVJDb2RlRGF0YSB9IGZyb20gJy4vcXJjb2RlJztcblxuQENvbXBvbmVudCh7XG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzZWxlY3RvcjogJ256LXFyY29kZScsXG4gIGV4cG9ydEFzOiAnbnpRUkNvZGUnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgY2xhc3M9XCJhbnQtcXJjb2RlLW1hc2tcIiAqbmdJZj1cIm56U3RhdHVzICE9PSAnYWN0aXZlJ1wiPlxuICAgICAgPG56LXNwaW4gKm5nSWY9XCJuelN0YXR1cyA9PT0gJ2xvYWRpbmcnXCI+PC9uei1zcGluPlxuICAgICAgPGRpdiAqbmdJZj1cIm56U3RhdHVzID09PSAnZXhwaXJlZCdcIj5cbiAgICAgICAgPHAgY2xhc3M9XCJhbnQtcXJjb2RlLWV4cGlyZWRcIj57eyBsb2NhbGUuZXhwaXJlZCB9fTwvcD5cbiAgICAgICAgPGJ1dHRvbiBuei1idXR0b24gbnpUeXBlPVwibGlua1wiIChjbGljayk9XCJyZWxvYWRRUkNvZGUoKVwiPlxuICAgICAgICAgIDxzcGFuIG56LWljb24gbnpUeXBlPVwicmVsb2FkXCIgbnpUaGVtZT1cIm91dGxpbmVcIj48L3NwYW4+XG4gICAgICAgICAgPHNwYW4+e3sgbG9jYWxlLnJlZnJlc2ggfX08L3NwYW4+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImlzQnJvd3NlclwiPlxuICAgICAgPGNhbnZhcyAjY2FudmFzPjwvY2FudmFzPlxuICAgIDwvbmctY29udGFpbmVyPlxuICBgLFxuICBob3N0OiB7XG4gICAgY2xhc3M6ICdhbnQtcXJjb2RlJyxcbiAgICAnW2NsYXNzLmFudC1xcmNvZGUtYm9yZGVyXSc6IGBuekJvcmRlcmVkYFxuICB9XG59KVxuZXhwb3J0IGNsYXNzIE56UVJDb2RlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBWaWV3Q2hpbGQoJ2NhbnZhcycsIHsgc3RhdGljOiBmYWxzZSB9KSBjYW52YXMhOiBFbGVtZW50UmVmPEhUTUxDYW52YXNFbGVtZW50PjtcbiAgQElucHV0KCkgbnpWYWx1ZTogc3RyaW5nID0gJyc7XG4gIEBJbnB1dCgpIG56Q29sb3I6IHN0cmluZyA9ICcjMDAwMDAwJztcbiAgQElucHV0KCkgbnpTaXplOiBudW1iZXIgPSAxNjA7XG4gIEBJbnB1dCgpIG56SWNvbjogc3RyaW5nID0gJyc7XG4gIEBJbnB1dCgpIG56SWNvblNpemU6IG51bWJlciA9IDQwO1xuICBASW5wdXQoKSBuekJvcmRlcmVkOiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgbnpTdGF0dXM6ICdhY3RpdmUnIHwgJ2V4cGlyZWQnIHwgJ2xvYWRpbmcnID0gJ2FjdGl2ZSc7XG4gIEBJbnB1dCgpIG56TGV2ZWw6IGtleW9mIHR5cGVvZiBFUlJPUl9MRVZFTF9NQVAgPSAnTSc7XG5cbiAgQE91dHB1dCgpIHJlYWRvbmx5IG56UmVmcmVzaCA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gIGxvY2FsZSE6IE56UVJDb2RlSTE4bkludGVyZmFjZTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvdW5pdmVyc2FsLXN0YXJ0ZXIvaXNzdWVzLzUzOCNpc3N1ZWNvbW1lbnQtMzY1NTE4NjkzXG4gIC8vIGNhbnZhcyBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBTU1IgRE9NXG4gIGlzQnJvd3NlciA9IHRydWU7XG4gIHByaXZhdGUgZGVzdHJveSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaTE4bjogTnpJMThuU2VydmljZSxcbiAgICBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBPYmplY3RcbiAgKSB7XG4gICAgdGhpcy5pc0Jyb3dzZXIgPSBpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpO1xuICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5pMThuLmxvY2FsZUNoYW5nZS5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMubG9jYWxlID0gdGhpcy5pMThuLmdldExvY2FsZURhdGEoJ1FSQ29kZScpO1xuICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgY29uc3QgeyBuelZhbHVlLCBuekljb24sIG56TGV2ZWwsIG56U2l6ZSwgbnpJY29uU2l6ZSwgbnpDb2xvciB9ID0gY2hhbmdlcztcbiAgICBpZiAoKG56VmFsdWUgfHwgbnpJY29uIHx8IG56TGV2ZWwgfHwgbnpTaXplIHx8IG56SWNvblNpemUgfHwgbnpDb2xvcikgJiYgdGhpcy5jYW52YXMpIHtcbiAgICAgIHRoaXMuZHJhd0NhbnZhc1FSQ29kZSgpO1xuICAgIH1cbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmRyYXdDYW52YXNRUkNvZGUoKTtcbiAgfVxuXG4gIHJlbG9hZFFSQ29kZSgpOiB2b2lkIHtcbiAgICB0aGlzLmRyYXdDYW52YXNRUkNvZGUoKTtcbiAgICB0aGlzLm56UmVmcmVzaC5lbWl0KCdyZWZyZXNoJyk7XG4gIH1cblxuICBkcmF3Q2FudmFzUVJDb2RlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNhbnZhcykge1xuICAgICAgZHJhd0NhbnZhcyhcbiAgICAgICAgdGhpcy5jYW52YXMubmF0aXZlRWxlbWVudCxcbiAgICAgICAgcGxvdFFSQ29kZURhdGEodGhpcy5uelZhbHVlLCB0aGlzLm56TGV2ZWwpLFxuICAgICAgICB0aGlzLm56U2l6ZSxcbiAgICAgICAgMTAsXG4gICAgICAgIHRoaXMubnpDb2xvcixcbiAgICAgICAgdGhpcy5uekljb25TaXplLFxuICAgICAgICB0aGlzLm56SWNvblxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcbiAgICB0aGlzLmRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gIH1cbn1cbiJdfQ==