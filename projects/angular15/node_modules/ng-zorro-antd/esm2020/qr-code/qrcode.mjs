/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import qrcodegen from './qrcodegen';
export const ERROR_LEVEL_MAP = {
    L: qrcodegen.QrCode.Ecc.LOW,
    M: qrcodegen.QrCode.Ecc.MEDIUM,
    Q: qrcodegen.QrCode.Ecc.QUARTILE,
    H: qrcodegen.QrCode.Ecc.HIGH
};
const DEFAULT_SIZE = 160;
const DEFAULT_SCALE = 10;
const DEFAULT_COLOR = '#000000';
const DEFAULT_ICONSIZE = 40;
const DEFAULT_LEVEL = 'M';
export const plotQRCodeData = (value, level = DEFAULT_LEVEL) => {
    if (!value) {
        return null;
    }
    return qrcodegen.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]);
};
export function drawCanvas(canvas, value, size = DEFAULT_SIZE, scale = DEFAULT_SCALE, color = DEFAULT_COLOR, iconSize = DEFAULT_ICONSIZE, icon) {
    const ctx = canvas.getContext('2d');
    canvas.style.width = `${size}px`;
    canvas.style.height = `${size}px`;
    if (!value) {
        ctx.fillStyle = 'rgba(0, 0, 0, 0)';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        return;
    }
    canvas.width = value.size * scale;
    canvas.height = value.size * scale;
    if (!icon) {
        drawCanvasColor(ctx, value, scale, color);
    }
    else {
        const iconImg = new Image();
        iconImg.src = icon;
        iconImg.crossOrigin = 'anonymous';
        iconImg.width = iconSize * (canvas.width / size);
        iconImg.height = iconSize * (canvas.width / size);
        iconImg.onload = () => {
            drawCanvasColor(ctx, value, scale, color);
            const iconCoordinate = canvas.width / 2 - (iconSize * (canvas.width / size)) / 2;
            ctx.fillRect(iconCoordinate, iconCoordinate, iconSize * (canvas.width / size), iconSize * (canvas.width / size));
            ctx.drawImage(iconImg, iconCoordinate, iconCoordinate, iconSize * (canvas.width / size), iconSize * (canvas.width / size));
        };
        iconImg.onerror = () => drawCanvasColor(ctx, value, scale, color);
    }
}
export function drawCanvasColor(ctx, value, scale, color) {
    for (let y = 0; y < value.size; y++) {
        for (let x = 0; x < value.size; x++) {
            ctx.fillStyle = value.getModule(x, y) ? color : 'rgba(0, 0, 0, 0)';
            ctx.fillRect(x * scale, y * scale, scale, scale);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXJjb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY29tcG9uZW50cy9xci1jb2RlL3FyY29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFFSCxPQUFPLFNBQVMsTUFBTSxhQUFhLENBQUM7QUFFcEMsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUErRDtJQUN6RixDQUFDLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRztJQUMzQixDQUFDLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTTtJQUM5QixDQUFDLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUTtJQUNoQyxDQUFDLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSTtDQUNwQixDQUFDO0FBRVgsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDO0FBQ3pCLE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQztBQUN6QixNQUFNLGFBQWEsR0FBRyxTQUFTLENBQUM7QUFDaEMsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7QUFDNUIsTUFBTSxhQUFhLEdBQWlDLEdBQUcsQ0FBQztBQUV4RCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FDNUIsS0FBYSxFQUNiLFFBQXNDLGFBQWEsRUFDMUIsRUFBRTtJQUMzQixJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ1YsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUNELE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3BFLENBQUMsQ0FBQztBQUVGLE1BQU0sVUFBVSxVQUFVLENBQ3hCLE1BQXlCLEVBQ3pCLEtBQThCLEVBQzlCLElBQUksR0FBRyxZQUFZLEVBQ25CLEtBQUssR0FBRyxhQUFhLEVBQ3JCLEtBQUssR0FBRyxhQUFhLEVBQ3JCLFFB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LEtBQUssQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUM7WUFDbkUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2xEO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cblxuaW1wb3J0IHFyY29kZWdlbiBmcm9tICcuL3FyY29kZWdlbic7XG5cbmV4cG9ydCBjb25zdCBFUlJPUl9MRVZFTF9NQVA6IHsgW2luZGV4IGluICdMJyB8ICdNJyB8ICdRJyB8ICdIJ106IHFyY29kZWdlbi5RckNvZGUuRWNjIH0gPSB7XG4gIEw6IHFyY29kZWdlbi5RckNvZGUuRWNjLkxPVyxcbiAgTTogcXJjb2RlZ2VuLlFyQ29kZS5FY2MuTUVESVVNLFxuICBROiBxcmNvZGVnZW4uUXJDb2RlLkVjYy5RVUFSVElMRSxcbiAgSDogcXJjb2RlZ2VuLlFyQ29kZS5FY2MuSElHSFxufSBhcyBjb25zdDtcblxuY29uc3QgREVGQVVMVF9TSVpFID0gMTYwO1xuY29uc3QgREVGQVVMVF9TQ0FMRSA9IDEwO1xuY29uc3QgREVGQVVMVF9DT0xPUiA9ICcjMDAwMDAwJztcbmNvbnN0IERFRkFVTFRfSUNPTlNJWkUgPSA0MDtcbmNvbnN0IERFRkFVTFRfTEVWRUw6IGtleW9mIHR5cGVvZiBFUlJPUl9MRVZFTF9NQVAgPSAnTSc7XG5cbmV4cG9ydCBjb25zdCBwbG90UVJDb2RlRGF0YSA9IChcbiAgdmFsdWU6IHN0cmluZyxcbiAgbGV2ZWw6IGtleW9mIHR5cGVvZiBFUlJPUl9MRVZFTF9NQVAgPSBERUZBVUxUX0xFVkVMXG4pOiBxcmNvZGVnZW4uUXJDb2RlIHwgbnVsbCA9PiB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gcXJjb2RlZ2VuLlFyQ29kZS5lbmNvZGVUZXh0KHZhbHVlLCBFUlJPUl9MRVZFTF9NQVBbbGV2ZWxdKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmF3Q2FudmFzKFxuICBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LFxuICB2YWx1ZTogcXJjb2RlZ2VuLlFyQ29kZSB8IG51bGwsXG4gIHNpemUgPSBERUZBVUxUX1NJWkUsXG4gIHNjYWxlID0gREVGQVVMVF9TQ0FMRSxcbiAgY29sb3IgPSBERUZBVUxUX0NPTE9SLFxuICBpY29uU2l6ZSA9IERFRkFVTFRfSUNPTlNJWkUsXG4gIGljb24/OiBzdHJpbmdcbik6IHZvaWQge1xuICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSBhcyBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XG4gIGNhbnZhcy5zdHlsZS53aWR0aCA9IGAke3NpemV9cHhgO1xuICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gYCR7c2l6ZX1weGA7XG4gIGlmICghdmFsdWUpIHtcbiAgICBjdHguZmlsbFN0eWxlID0gJ3JnYmEoMCwgMCwgMCwgMCknO1xuICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgIHJldHVybjtcbiAgfVxuICBjYW52YXMud2lkdGggPSB2YWx1ZS5zaXplICogc2NhbGU7XG4gIGNhbnZhcy5oZWlnaHQgPSB2YWx1ZS5zaXplICogc2NhbGU7XG4gIGlmICghaWNvbikge1xuICAgIGRyYXdDYW52YXNDb2xvcihjdHgsIHZhbHVlLCBzY2FsZSwgY29sb3IpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGljb25JbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICBpY29uSW1nLnNyYyA9IGljb247XG4gICAgaWNvbkltZy5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnO1xuICAgIGljb25JbWcud2lkdGggPSBpY29uU2l6ZSAqIChjYW52YXMud2lkdGggLyBzaXplKTtcbiAgICBpY29uSW1nLmhlaWdodCA9IGljb25TaXplICogKGNhbnZhcy53aWR0aCAvIHNpemUpO1xuICAgIGljb25JbWcub25sb2FkID0gKCkgPT4ge1xuICAgICAgZHJhd0NhbnZhc0NvbG9yKGN0eCwgdmFsdWUsIHNjYWxlLCBjb2xvcik7XG4gICAgICBjb25zdCBpY29uQ29vcmRpbmF0ZSA9IGNhbnZhcy53aWR0aCAvIDIgLSAoaWNvblNpemUgKiAoY2FudmFzLndpZHRoIC8gc2l6ZSkpIC8gMjtcblxuICAgICAgY3R4LmZpbGxSZWN0KGljb25Db29yZGluYXRlLCBpY29uQ29vcmRpbmF0ZSwgaWNvblNpemUgKiAoY2FudmFzLndpZHRoIC8gc2l6ZSksIGljb25TaXplICogKGNhbnZhcy53aWR0aCAvIHNpemUpKTtcbiAgICAgIGN0eC5kcmF3SW1hZ2UoXG4gICAgICAgIGljb25JbWcsXG4gICAgICAgIGljb25Db29yZGluYXRlLFxuICAgICAgICBpY29uQ29vcmRpbmF0ZSxcbiAgICAgICAgaWNvblNpemUgKiAoY2FudmFzLndpZHRoIC8gc2l6ZSksXG4gICAgICAgIGljb25TaXplICogKGNhbnZhcy53aWR0aCAvIHNpemUpXG4gICAgICApO1xuICAgIH07XG4gICAgaWNvbkltZy5vbmVycm9yID0gKCkgPT4gZHJhd0NhbnZhc0NvbG9yKGN0eCwgdmFsdWUsIHNjYWxlLCBjb2xvcik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdDYW52YXNDb2xvcihcbiAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gIHZhbHVlOiBxcmNvZGVnZW4uUXJDb2RlLFxuICBzY2FsZTogbnVtYmVyLFxuICBjb2xvcjogc3RyaW5nXG4pOiB2b2lkIHtcbiAgZm9yIChsZXQgeSA9IDA7IHkgPCB2YWx1ZS5zaXplOyB5KyspIHtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHZhbHVlLnNpemU7IHgrKykge1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IHZhbHVlLmdldE1vZHVsZSh4LCB5KSA/IGNvbG9yIDogJ3JnYmEoMCwgMCwgMCwgMCknO1xuICAgICAgY3R4LmZpbGxSZWN0KHggKiBzY2FsZSwgeSAqIHNjYWxlLCBzY2FsZSwgc2NhbGUpO1xuICAgIH1cbiAgfVxufVxuIl19