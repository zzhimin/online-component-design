/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
/** Returns the ratio of the device's physical pixel resolution to the css pixel resolution */
export function getPixelRatio() {
    return window.devicePixelRatio || 1;
}
export function toLowercaseSeparator(key) {
    return key.replace(/([A-Z])/g, '-$1').toLowerCase();
}
export function getStyleStr(style) {
    const keys = Object.keys(style);
    const styleCss = keys.map((key) => `${toLowercaseSeparator(key)}: ${style[key]};`);
    return styleCss.join(' ');
}
/** Whether to re-render the watermark */
export function reRendering(mutation, watermarkElement) {
    let flag = false;
    // Whether to delete the watermark node
    if (mutation.removedNodes.length) {
        flag = Array.from(mutation.removedNodes).some(node => node === watermarkElement);
    }
    // Whether the watermark dom property value has been modified
    if (mutation.type === 'attributes' && mutation.target === watermarkElement) {
        flag = true;
    }
    return flag;
}
/** Rotate with the watermark as the center point */
export function rotateWatermark(ctx, rotateX, rotateY, rotate) {
    ctx.translate(rotateX, rotateY);
    ctx.rotate((Math.PI / 180) * Number(rotate));
    ctx.translate(-rotateX, -rotateY);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NvbXBvbmVudHMvd2F0ZXItbWFyay91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUlILDhGQUE4RjtBQUM5RixNQUFNLFVBQVUsYUFBYTtJQUMzQixPQUFPLE1BQU0sQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLENBQUM7QUFDdEMsQ0FBQztBQUVELE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxHQUE4QjtJQUNqRSxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3RELENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEtBQTBCO0lBQ3BELE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFxQyxDQUFDO0lBQ3BFLE1BQU0sUUFBUSxHQUFhLElBQUksQ0FBQyxHQUFHLENBQ2pDLENBQUMsR0FBOEIsRUFBRSxFQUFFLENBQUMsR0FBRyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FDbkYsQ0FBQztJQUNGLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBRUQseUNBQXlDO0FBQ3pDLE1BQU0sVUFBVSxXQUFXLENBQUMsUUFBd0IsRUFBRSxnQkFBOEI7SUFDbEYsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDO0lBQ2pCLHVDQUF1QztJQUN2QyxJQUFJLFFBQVEsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFO1FBQ2hDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssZ0JBQWdCLENBQUMsQ0FBQztLQUNsRjtJQUNELDZEQUE2RDtJQUM3RCxJQUFJLFFBQVEsQ0FBQyxJQUFJLEtBQUssWUFBWSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssZ0JBQWdCLEVBQUU7UUFDMUUsSUFBSSxHQUFHLElBQUksQ0FBQztLQUNiO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsb0RBQW9EO0FBQ3BELE1BQU0sVUFBVSxlQUFlLENBQUMsR0FBNkIsRUFBRSxPQUFlLEVBQUUsT0FBZSxFQUFFLE1BQWM7SUFDN0csR0FBRyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDN0MsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3BDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBNYXJrU3R5bGVDYW52YXNUeXBlIH0gZnJvbSAnLi90eXBpbmdzJztcblxuLyoqIFJldHVybnMgdGhlIHJhdGlvIG9mIHRoZSBkZXZpY2UncyBwaHlzaWNhbCBwaXhlbCByZXNvbHV0aW9uIHRvIHRoZSBjc3MgcGl4ZWwgcmVzb2x1dGlvbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBpeGVsUmF0aW8oKTogbnVtYmVyIHtcbiAgcmV0dXJuIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0xvd2VyY2FzZVNlcGFyYXRvcihrZXk6IGtleW9mIE1hcmtTdHlsZUNhbnZhc1R5cGUpOiBzdHJpbmcge1xuICByZXR1cm4ga2V5LnJlcGxhY2UoLyhbQS1aXSkvZywgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHlsZVN0cihzdHlsZTogTWFya1N0eWxlQ2FudmFzVHlwZSk6IHN0cmluZyB7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzdHlsZSkgYXMgQXJyYXk8a2V5b2YgTWFya1N0eWxlQ2FudmFzVHlwZT47XG4gIGNvbnN0IHN0eWxlQ3NzOiBzdHJpbmdbXSA9IGtleXMubWFwKFxuICAgIChrZXk6IGtleW9mIE1hcmtTdHlsZUNhbnZhc1R5cGUpID0+IGAke3RvTG93ZXJjYXNlU2VwYXJhdG9yKGtleSl9OiAke3N0eWxlW2tleV19O2BcbiAgKTtcbiAgcmV0dXJuIHN0eWxlQ3NzLmpvaW4oJyAnKTtcbn1cblxuLyoqIFdoZXRoZXIgdG8gcmUtcmVuZGVyIHRoZSB3YXRlcm1hcmsgKi9cbmV4cG9ydCBmdW5jdGlvbiByZVJlbmRlcmluZyhtdXRhdGlvbjogTXV0YXRpb25SZWNvcmQsIHdhdGVybWFya0VsZW1lbnQ/OiBIVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xuICBsZXQgZmxhZyA9IGZhbHNlO1xuICAvLyBXaGV0aGVyIHRvIGRlbGV0ZSB0aGUgd2F0ZXJtYXJrIG5vZGVcbiAgaWYgKG11dGF0aW9uLnJlbW92ZWROb2Rlcy5sZW5ndGgpIHtcbiAgICBmbGFnID0gQXJyYXkuZnJvbShtdXRhdGlvbi5yZW1vdmVkTm9kZXMpLnNvbWUobm9kZSA9PiBub2RlID09PSB3YXRlcm1hcmtFbGVtZW50KTtcbiAgfVxuICAvLyBXaGV0aGVyIHRoZSB3YXRlcm1hcmsgZG9tIHByb3BlcnR5IHZhbHVlIGhhcyBiZWVuIG1vZGlmaWVkXG4gIGlmIChtdXRhdGlvbi50eXBlID09PSAnYXR0cmlidXRlcycgJiYgbXV0YXRpb24udGFyZ2V0ID09PSB3YXRlcm1hcmtFbGVtZW50KSB7XG4gICAgZmxhZyA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGZsYWc7XG59XG5cbi8qKiBSb3RhdGUgd2l0aCB0aGUgd2F0ZXJtYXJrIGFzIHRoZSBjZW50ZXIgcG9pbnQgKi9cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVXYXRlcm1hcmsoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHJvdGF0ZVg6IG51bWJlciwgcm90YXRlWTogbnVtYmVyLCByb3RhdGU6IG51bWJlcik6IHZvaWQge1xuICBjdHgudHJhbnNsYXRlKHJvdGF0ZVgsIHJvdGF0ZVkpO1xuICBjdHgucm90YXRlKChNYXRoLlBJIC8gMTgwKSAqIE51bWJlcihyb3RhdGUpKTtcbiAgY3R4LnRyYW5zbGF0ZSgtcm90YXRlWCwgLXJvdGF0ZVkpO1xufVxuIl19